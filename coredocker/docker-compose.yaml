version: '3.6'
services:

  reverse-proxy:
    container_name: traefik
    image: traefik:v2.4
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--accesslog=true"
      - "--api"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker=true"
      # Entrypoints
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      # Bind domain and resolver to websecure entrypoint
      - "--entrypoints.websecure.http.tls.certResolver=myresolver"
      - "--entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN}"
      # Ignore self-signed backend certs
      - "--serversTransport.insecureSkipVerify=true"
      # ACME.SH settings
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=loopia"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_MAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.delaybeforecheck=2"
    environment:
      - "LOOPIA_API_USER=${LOOPIA_API_USER}"
      - "LOOPIA_API_PASSWORD=${LOOPIA_API_PASSWORD}"
    volumes:
      - ./data/cert:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "443:443"
    networks:
      default:
        ipv4_address: 172.20.0.20
        aliases:
        - traefik
    # Don't know what this is but it makes "network_mode: host" containers work sometimes
    extra_hosts:
      - host.docker.internal:172.20.0.1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=authelia@docker"

  # Create new passwords with docker run authelia/authelia:latest authelia hash-password 'password
  sso:
    container_name: authelia
    image: authelia/authelia
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Stockholm
    volumes:
      - ./data/authelia:/config
    expose:
      - 9091
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authelia.rule=Host(`login.${DOMAIN}`)'
      - 'traefik.http.routers.authelia.entrypoints=websecure'
      - 'traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.${DOMAIN}/'
      - 'traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User, Remote-Groups, Remote-Name, Remote-Email'
      - 'traefik.http.middlewares.authelia-basic.forwardauth.address=http://authelia:9091/api/verify?auth=basic'
      - 'traefik.http.middlewares.authelia-basic.forwardauth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia-basic.forwardauth.authResponseHeaders=Remote-User, Remote-Groups, Remote-Name, Remote-Email'

  dashboard:
    container_name: heimdall
    image: ghcr.io/linuxserver/heimdall
    restart: unless-stopped
    environment:
      - TZ=Europe/Stockholm
      - PUID=1000
      - PGID=1000
    volumes:
      - ./data/heimdall:/config
    expose:
      - 80
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.heimdall.rule=Host(`dashboard.${DOMAIN}`)'
      - 'traefik.http.routers.heimdall.entrypoints=websecure'
      - 'traefik.http.routers.heimdall.middlewares=authelia@docker'

  unifi-controller:
    container_name: unifi
    image: ghcr.io/linuxserver/unifi-controller
    restart: unless-stopped
    environment:
      - TZ=Europe/Stockholm
      - PUID=1000
      - PGID=1000
      - MEM_LIMIT=1024M
      - MEM_STARTUP=1024M
    volumes:
      - ./data/unifi:/config
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 1900:1900/udp 
      - 8843:8843 
      - 8880:8880
      - 6789:6789
      - 5514:5514/udp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.unifi.rule=Host(`unifi.${DOMAIN}`)"
      - "traefik.http.routers.unifi.entrypoints=websecure"
      - "traefik.http.services.unifi.loadbalancer.server.scheme=https"
      - "traefik.http.services.unifi.loadbalancer.server.port=8443"

  homeassistant:
    container_name: hass
    image: "ghcr.io/home-assistant/home-assistant:stable"
    restart: unless-stopped
    environment:
      - TZ=Europe/Stockholm
    volumes:
      - ./data/hass:/config
    privileged: true
    network_mode: host
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homeassistant.entrypoints=websecure"
      - "traefik.http.routers.homeassistant.rule=Host(`home.${DOMAIN}`)"
      - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"
      - "traefik.http.middlewares.homeassistant.headers.customFrameOptionsValue=SAMEORIGIN"

  node-red:
    container_name: node-red
    image: nodered/node-red
    restart: unless-stopped
    environment:
      - TZ=Europe/Stockholm
    volumes:
      - ./data/node-red/data:/data
    expose:
      - 1880
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node-red.entrypoints=websecure"
      - "traefik.http.routers.node-red.rule=Host(`node-red.steamnet.se`)"
      - "traefik.http.services.node-red.loadbalancer.server.scheme=http"
      - "traefik.http.services.node-red.loadbalancer.server.port=1880"

  mqtt:
    container_name: mosquitto
    image: eclipse-mosquitto
    restart: unless-stopped
    environment:
      - TZ=Europe/Stockholm
    volumes:
      - ./data/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - 1883:1883/tcp

  vpn:
    container_name: wireguard
    image: ghcr.io/linuxserver/wireguard
    restart: unless-stopped
    environment:
      - TZ=Europe/Stockholm
      - PUID=1000
      - PGID=1000
    volumes:
      - ./data/wireguard/wg0.conf:/config/wg0.conf
      - /lib/modules:/lib/modules
    expose:
      - 9091 #transmission
      - 9117 #jackett
      - 8989 #sonarr
      - 7878 #radarr
    networks:
      default:
        aliases:
        - wireguard
        - transmission
        - jackett
        - sonarr
        - radarr
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    labels:
      - "traefik.enable=true"
      # transmission endpoint
      - "traefik.http.routers.transmission.entrypoints=websecure"
      - "traefik.http.routers.transmission.rule=Host(`transmission.${DOMAIN}`)"
      - "traefik.http.routers.transmission.service=transmission"
      - 'traefik.http.routers.transmission.middlewares=authelia@docker'
      - "traefik.http.services.transmission.loadbalancer.server.scheme=http"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"
      # jackett endpoint
      - "traefik.http.routers.jackett.entrypoints=websecure"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${DOMAIN}`)"
      - "traefik.http.routers.jackett.service=jackett"
      - "traefik.http.routers.jackett.middlewares=authelia@docker"
      - "traefik.http.services.jackett.loadbalancer.server.scheme=http"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
      # sonarr endpoint
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.service=sonarr"
      - 'traefik.http.routers.sonarr.middlewares=authelia@docker'
      - "traefik.http.services.sonarr.loadbalancer.server.scheme=http"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      # radarr endpoint
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.service=radarr"
      - 'traefik.http.routers.radarr.middlewares=authelia@docker'
      - "traefik.http.services.radarr.loadbalancer.server.scheme=http"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  transmission:
    image: ghcr.io/linuxserver/transmission
    container_name: transmission
    restart: unless-stopped
    depends_on: [ "vpn" ]
    environment:
      - TZ=Europe/Stockholm
      - PUID=1000
      - PGID=1000
      - TRANSMISSION_WEB_HOME=/combustion-release/
    volumes:
      - ./data/transmission/config:/config
      - /mnt/nfs/download:/downloads
    network_mode: "service:vpn"

  jackett:
    container_name: jackett
    image: ghcr.io/linuxserver/jackett
    restart: unless-stopped
    depends_on: [ "vpn" ]
    environment:
      - TZ=Europe/Stockholm
      - PUID=1000
      - PGID=1000
    volumes:
      - ./data/jackett:/config
    network_mode: "service:vpn"

  sonarr:
    container_name: sonarr
    image: ghcr.io/linuxserver/sonarr
    restart: unless-stopped
    depends_on: [ "vpn" ]
    environment:
      - TZ=Europe/Stockholm
      - PUID=1000
      - PGID=1000
    volumes:
      - ./data/sonarr:/config
      - /mnt/nfs/tv:/tv 
      - /mnt/nfs/download:/downloads 
    network_mode: "service:vpn"

  radarr:
    container_name: radarr
    image: ghcr.io/linuxserver/radarr
    restart: unless-stopped
    depends_on: [ "vpn" ]
    environment:
      - TZ=Europe/London
      - PUID=1000
      - PGID=1000
    volumes:
      - ./data/radarr:/config
      - /mnt/nfs/movies:/movies
      - /mnt/nfs/download:/downloads
    network_mode: "service:vpn"

  plex:
    container_name: plex
    image: ghcr.io/linuxserver/plex
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - ./data/plex:/config
      - /mnt/nfs/tv:/tv
      - /mnt/nfs/movies:/movies
      - /mnt/ramdisk:/ramdisk
    #devices:
    #  - /dev/dri:/dev/dri
    network_mode: host
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAIN}`)"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
      - "traefik.http.middlewares.plex.headers.customFrameOptionsValue=SAMEORIGIN"


networks:
  default:
    name: traefik
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
